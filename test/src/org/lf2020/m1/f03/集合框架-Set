Set
 与List不同,Set集合不包含重复元素,且存储无序.
 其底层存储结构是一个Map

 存储去重的过程:
    在底层依赖于对象的hashCode()和equals()方法进行判断,哈希值相等且equals返回true(成功判断了元素相同),则不添加元素,否则正常添加元素
    而自定义对象默认使用父类的hashCode方法,此方法返回的哈希值基本不可能相同,导致任何元素都会添加成功
    所以,若想使用set去重,则必须重写自定义对象的hashCode()和equals()方法
    equals逻辑
    1.判断地址值是否相等  相等直接return true
    2.判断是否是同一个类  不是直接return false
    3.转换为当前类类型 return 各个成员变量的比较

    hashCode逻辑
    引用类型的hashCode() + 基本类型的值
    可选优化,在成员变量的值上*某个数字,可提高效率

 LinkedHashSet
    HashSet的子类,底层数据结构由哈希表和链表组成
    哈希表保证元素的唯一性
    链表保证元素的有序性

 TreeSet
    在保证去重功能的基础上,能够对元素按照某种规则进行排序
    底层数据结构为二叉树(红黑二叉数)
    排序有两种方式:
        A:自然排序(元素具备比较性,将Comparable在自定义对象中实现)
        B:比较器排序(集合具备比较性,将Comparable在TreeSet的构造方法参数中接收一个Comparable的实现)
    在底层依赖comparable接口的compareTo()方法进行比较
    所以存储的对象必须实现Comparable接口并重写compareTo()方法才能实现去重与排序

