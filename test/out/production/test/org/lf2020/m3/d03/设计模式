设计模式
    1.概述:经验的总结
    2.分类:
        (1)创建型 创建对象
        (2)结构型 对象的组成
        (3)行为型 对象的功能
    3.简单工厂模式
        (1)概述:又叫静态工厂方法模式,它定义一个具体的工厂类负责创建一些类的实例
        (2)优点:调用类不需要负责类的创建,从而明确了各类的职责
        (3)缺点:这个静态工厂类负责所有对象的创建,如果有新的对象增加,或者某些对象的创建方式不同,就需要不断修改工厂类,不利于后期维护.
    4.工厂方法模式
    5.单例模式
        (1)饿汉式:类一加载就创建对象(是不会出问题的单例模式)
            代码实现:
                public class Student {
                    private Student(){};//构造方法私有化,不让外部访问
                    private static Student s=null;//创建一个类变量,以此控制只有一个实例.
                    public  static Student getInstance(){
                        return s;
                    }
                }
        (2)懒汉式:用的时候,才去创建对象(可能会出问题的单例模式)
            A.懒加载(延迟加载)
            B.线程安全问题
                a.是否多线程      是
                b.是否共享数据    是
                c.是否多条语句操作共享数据  是
             由于线程安全问题,要把懒汉式单例模式对外提供的创建单例的方法上,加上synchronized同步锁,否则可能出现多个线程创建了多个实例的情况.
            C.代码实现:
                public class Student {
                    private Student(){};//构造方法私有化,不让外部访问
                    private static Student s=null;//创建一个类变量,以此控制只有一个实例.
                    public synchronized static Student getInstance(){//添加synchronized关键字保证线程安全
                        if(s==null){
                            s=new Student();
                        }
                                     return s;
                    }
                }
    6.Runtime类
        JDK单例模式的一个应用
        每个 Java 应用程序都有一个 Runtime 类实例，使应用程序能够与其运行的环境相连接。可以通过 getRuntime 方法获取当前运行时。
        可以执行操作系统的dos命令
