System类的学习
1.System.gc()
 运行垃圾回收器。
 调用 gc 方法暗示着 Java 虚拟机做了一些努力来回收未用对象，以便能够快速地重用这些对象当前占用的内存。
 当控制权从方法调用中返回时，虚拟机已经尽最大努力从所有丢弃的对象中回收了空间。
 调用 System.gc() 实际上等效于调用：
 Runtime.getRuntime().gc()
 在没有明确指定资源清理的情况下，java提供了默认机制来清理该对象的资源，就是调用Object的finalize（）方法
 finalize（）方法的作用是释放一个对象占用的内存空间时，会被JVM调用。而子类重写该方法就可以清理对象占用的资源，该方法没有链式编程，所以必须手动实现。
 执行System.gc()前，系统会自动调用finalize()方法清理对象占用的资源，通过super.finalize()方式可以实现从下到上的finalize()调用，即先释放自己的资源再释放父类的资源。
 但是，不要在程序中频繁的调用垃圾回收，因为每执行一次垃圾回收，jvm都会强制启动垃圾回收器运行，这会耗费更多资源，会与正常的java程序争抢资源，只有在执行大量的对象释放，才调用垃圾回收最好。
2.System.exit(int status)
 终止当前正在运行的 Java 虚拟机。参数用作状态码；根据惯例，非 0 的状态码表示异常终止。
 该方法调用 Runtime 类中的 exit 方法。该方法永远不会正常返回。
 调用 System.exit(n) 实际上等效于调用：
 Runtime.getRuntime().exit(n)
3.System.currentTimeMillis()
 返回当前时间与协调世界时 1970 年 1 月 1 日午夜之间的时间差（以毫秒为单位测量）。注意，当返回值的时间单位是毫秒时，值的粒度取决于底层操作系统，并且粒度可能更大。例如，许多操作系统以几十毫秒为单位测量时间。
 那么问题来了：日期为什么都是从1970年1月1日计算的
4.System.arraycopy()
 从指定源数组中复制一个数组，复制从指定的位置开始，到目标数组的指定位置结束。

