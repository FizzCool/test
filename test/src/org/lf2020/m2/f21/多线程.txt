多线程
    1.进程
        A.什么是进程:
            就是正在运行的程序,是系统进行资源分配和调用的独立单位.每一个进程都有自己的内存空间和系
            统资源.
        B.多进程有什么意义?
            单进程的计算机在同一个时间段只能执行一个任务,而现在的计算机都是多进程的,在同一个时间段内可
                                              以执行多个任务,这样可以提高CPU的使用率.
          举例:一边玩游戏(游戏进程),一边听音乐(音乐进程)
          问题:玩游戏和听音乐是同时进行的么?
            不是,因为单CPU在同一个时间点上只能做一件事情,是CPU做着程序之间执行的快速切换,让我们感觉这是
            同时进行的
    2.线程
        A.什么是线程:
            在同一个进程内又可以执行多个任务,而这每一个任务都可以看作是一个线程.
            线程:是程序的执行单元,执行路径.是程序使用cpu的最基本单位
          单线程:程序只有一条执行路径.
          多线程:程序有多条执行路径.
        B.多线程有什么意义?
            多线程的存在,不是提高程序的执行速度.其实,是为了提高引用程序的使用率.
            程序的执行其实都是在抢CPU资源,CPU的执行权.
            多个进程抢一个资源,如果某个进程执行路径较多,就会有更高几率抢到CPU执行权.
            我们无法保证哪一个线程在哪一个时刻抢到,所以线程的执行有随机性.
    3.并发和并行
        并发:在同一时段内交替做不同的事情.
            #在操作系统中,并发指同一个处理机上同一个时间段内有几个个程序都已到处于启动运行到运行结束之间,但任意一个时刻点上都只有一个程序在运行.
        并行:在同一时刻上同时做不同的事情
    4.如何实现多线程程序
        由于线程是依赖于进程存在的,所以我们应该先创建一个进程.
        而进程是由系统功能创建的,所以我们应该调用系统功能去创建一个进程.
        Java是不能调用系统功能的,所以我们无法创建一个多线程程序.
        但是,Java可以调用C/C++写好的程序来实现多线程程序.
        由C/C++去调用系统功能创建进程,然后由Java去调用,提供一些类给我们,就可以实现多线程程序了
        A.通过API得到的实现多线程的方式有两种
            方式1:继承Thread类
            步骤:
                 a.自定义MyThread继承Thread类
                 b.MyThread类里重写run()方法
                   #为什么要重写run()方法?
                   #不是类中所有的代码都要被线程执行,run()方法用来包含那些被线程执行的代码
                 c.创建对象
                 d.启动线程
                   #调用run()方法仍然是单线程.
                   #start()方法和run()方法的区别?
                    run()方法:仅仅是封装被线程执行的代码,直接调用是普通方法
                    start()方法:首先启动线程,然后由JVM去调用该线程的run()方法
            方式2:实现Runnable接口
            步骤:
                a.自定义类MyRunnable实现Runnable接口
                b.重写run()方法
                c.创建MyRunnable对象
                d.创建Thread对象,把c步骤对象作为参数传递
        B.有了方式1为什么还要有方式2呢?
            a.可以避免由于Java单继承带来的局限性
            b.适合多个线程处理同一个资源的情况,把线程和程序的代码,数据有效分离,较好的体现了面向对象的思想
    5.线程调度
        线程有两种调度模型:
            A.分时调度模型
                所有线程轮流获得CPU的使用权,平均分配每个线程占用CPU的时间片
            B.抢占式调度模型
                优先让优先级高的线程使用CPU,如果线程优先级相同,那么会随机选择一个.优先级高的线程获取的CPU
                时间片相对多一些.
        Java使用的是抢占式调度模型

    6.Thread类
        构造方法:
            Thread() 分配新的 Thread 对象。
            Thread(String name) 分配新的 Thread 对象。并设定好线程名.
            Thread(Runnable target) 分配新的 Thread 对象。通过传递Runnable对象
            Thread(Runnable target, String name)  分配新的 Thread 对象。 通过传递Runnable对象 以及线程名

        成员方法:
            public void run() 执行run()里的代码,Thread 的子类应该重写该方法。
            public void start() 使该线程开始执行；Java 虚拟机调用该线程的 run 方法。
            public final String getName() 返回该线程的名称。
            public void setName(String name) 改变线程名称，使之与参数 name 相同。
            public static Thread currentThread() 返回对当前正在执行的线程对象的引用。
            --线程优先级:
            public final void setPriority(int newPriority)更改线程的优先级。
            public final int getPriority()返回线程的优先级。(1~10)
            --线程休眠:
            public static void sleep(long millis)在指定的毫秒数内让当前正在执行的线程休眠（暂停执行），此操作受到系统计时器和调度程序精度和准确性的影响。
            --线程加入:
            public final void join()等待该线程终止。
            --线程礼让:
            public static void yield()暂停当前正在执行的线程对象，并执行其他线程.(此方法能在一定程度上使程序之间和谐的执行,但并不能保证绝对的交替有序)
            --后台线程:
            public final void setDaemon(boolean on)将该线程标记为守护线程或用户线程。当正在运行的线程都是守护线程时，Java 虚拟机退出。 该方法必须在启动线程前调用。
            ps:个人理解,就是守护进程的上级进程(也就是守护进程守护的进程)停止运行时,守护进程也会停止运行.
            --线程中断:
            public void interrupt()中断线程。
            ps:若此线程没有自己中断,则中断线程的各种等待执行过程,立即执行代码.并抛出异常InterruptedException
    7.线程的生命周期
        1.新建,创建线程对象
        2.就绪,有执行资格,没有获得cpu执行权
        3.运行,有执行资格,获得cpu执行权
        4.阻塞,处于运行状态的线程失去某些必要资源,没有执行资源没有cpu执行权
        5.死亡,对象变成垃圾等待被回收
    8.线程安全
        1.同步
          A.同步的特点
            多线程
            多个线程使用同一个锁对象
          B.同步的好处
            同步的出现解决了线程安全问题
          C.同步的弊端
            线程较多时,每个线程都会判断同步锁,这是很耗资源的,无形中降低了运行效率
            如果出现同步嵌套就会出现死锁问题

        2.解决线程安全
          实现1:同步代码块
              格式
              synchronized(对象){需要同步的代码}
              --同步可以解决安全问题的根本原因就在这个对象上,该对象如同锁的功能.
              --多线程必须是同一把锁
              --锁对象问题
              同步代码块:任意对象
              同步方法:this
              静态同步方法:类的字节码文件对象
          实现2:JDK5新的锁对象Lock
              a.Lock 实现提供了比使用 synchronized 方法和语句可获得的更广泛的锁定操作
              b.Lock是一个接口,具体应使用其子类对象
              c.通过以下两个方法来将需要同步的代码锁在中间
                void lock()获取锁。
                void unlock()释放锁。
                使用try{lock()}finally{unlock()}来保证即使出现异常锁资源也能及时释放
        3.死锁
            死锁是指两个或两个以上的线程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞
            的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这
            些永远在互相等待的进程称为死锁进程。
        4.死锁的解决方案
            等待唤醒机制:
                Object类
                 void wait() 使当前线程处于等待(阻塞)状态,直到其他线程调用此对象的 notify() 方法或 notifyAll()方法
                 且,等待的同时会释放当前线程所占用的锁资源
                 void notify() 唤醒在此对象监视器上等待的单个线程。如果所有线程都在此对象上等待，则会选择唤醒其中一个线程。选择是任意性的.
    9.线程组
    10.线程池
        (1)概述:程序启动一个新线程成本是比较高的,因为它涉及到要与操作系统进行交互.而使用线程池可以很好的
             提高性能,尤其是当程序中需要创建大量生命周期很短的线程时,更应该考虑使用线程池.
             --线程池里的每一个线程,代码结束后并不会死亡,而实再次回到线程池里成为空闲状态,等待下一个对象来使用.
        (2)JDK5提供了新的Executors工厂类来产生线程池
            有如下几个方法:
            static ExecutorService newCachedThreadPool()
            static ExecutorService newFixedThreadPool(int nThreads)
            static ExecutorService newSingleThreadExecutor(ThreadFactory threadFactory)
        (3)线程池的实现
            A.创建线程池对象,通过参数控制线程的个数
            B.这种线程池里的线程可以执行:
                a.Runnable对象或Callable对象代表的线程
                B.自定义类实现Runnable接口
            C调用ExecutorService的方法执行
                <T> Future<T> submit(Callable<T> task)
                Future<?> submit(Runnable task)
            D.必要时可以一次终止所有线程
                void shutdown() 启动一次顺序关闭，执行以前提交的任务，但不接受新任务。
        (4)Callable<T>接口
            A.概述:与Runnable很相似,不同点在于:
                a.Callable增加了泛型和返回值,执行后可以通过Future类接收,此外,还可以抛异常.
                b.Callable只能和Executors配合使用
    11.定时器
        (1)Timer
            A.概述:一种工具，线程用其安排以后在后台线程中执行的任务。可安排任务执行一次，或者定期重复执行。
            B.构造方法:
                Timer() 创建一个新计时器。
                Timer(boolean isDaemon)
                Timer(String name)
                Timer(String name, boolean isDaemon)
            C.常用成员方法
                void schedule(TimerTask task, Date time) 安排在指定的时间执行指定的任务。
                void schedule(TimerTask task, Date firstTime, long period) 安排指定的任务在指定的时间开始进行重复的固定延迟执行。
                void schedule(TimerTask task, long delay) 安排在指定延迟后执行指定的任务。
                void schedule(TimerTask task, long delay, long period) 安排指定的任务从指定的延迟后开始进行重复的固定延迟执行。
                void cancel() 终止此计时器，丢弃所有当前已安排的任务。
    12.和线程有关的问题
        (1)sleep()和wait()的区别
            sleep(),必须指定时间,不释放锁
            wait(),可以指定时间,释放锁
        (2)为什么wait(),nodify(),nodify()这些方法定义在Object中
            因为这些方法的调用是依赖于锁对象的,而同步代码块的锁对象是任意锁,而Object代表任意对象,所以这些方法定义在Object中.















